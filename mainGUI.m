% function [] = mainGUI()
% This function provides a graphical user interface for the main function
% for the project. It only takes input (variables & parameters) and passes
% those on to the main.m-file, where all calculations happen. Explanatory
% comments about the functions and all calculations can thus be found in
% the other files OR by reading the readme.
%
% Info: 
% - All pictures for the floor layout MUST start with the letter "f" and
%   must be placed in ./image_read/
% - All pictures for the heating layout MUST start with the letter "s" and
%   must be placed in ./image_read/
% - The material properties MUST be entered in the excel sheet in the
%   folder ./data and MUST have name entered in the first column as well as
%   values in the three other columns (rho, cp, lambda). If the data is
%   changed, the data MUST be imported. Read the section
%   "Data for Material Properties Import" for further instruction.
% - All output files will be placed in the ./export directory from where this
%   function was called. 

clc; clear all; close all;
global h % figure
addpath('./data/')
addpath('./image_read/')

filesHeating    = dir('./image_read/s*.bmp');   % find all source layouts
filesHeating    = {filesHeating(:,1).name};     % extract names from struct
filesFloor      = dir('./image_read/f*.bmp');   % find all floor layouts
filesFloor      = {filesFloor(:,1).name};       % extract names from struct
%% GUI Setting & Alignments
fheigth         = 520;
fwidth          = 1.75*fheigth;
guideTextLeft   = 10;
guideBoxesLeft  = 120;
guideBoxesTop   = fheigth-40;

colorFigure     = [219 219 219]/255;
colorPanles     = [200 200 200]/255;

%% Data for Material Properties Import
% ! Only uncomment next two lines of code and run once if data.xlsx was
% ! modified. Otherwise, just load the table via the third line.
% ! Reading a table via readtable() is very time consuming. 

% dataMaterialProperties = readtable('data.xlsx','ReadRowNames',true);
% save('./data/dataMaterialProperties.mat', 'dataMaterialProperties'); 
load('./data/dataMaterialProperties.mat')

%% Figure (main window)
h.fig   = figure('name', 'GUI Wärmeleitung Numerik 1',...
                 'position', [100 100 fwidth fheigth],...
                 'color', colorFigure,...
                 'resize', 'off',...
                 'menubar', 'none');
txtInfo = 'Welcome to the graphical user interface. This program can be used to simulate the 2D heat conduction in a floor. For further engineering backgroud please refer to the report. In case of issues with the program, please consult the user manual.';
uicontrol('style', 'text',...
                'FontSize', 9,...
                'position', [guideTextLeft+600 50 200 100],...
                'BackgroundColor', colorPanles,...
                'HorizontalAlignment', 'Left',...
                'string', txtInfo);
            
%% Panels & Text for imaginary panels
% Position:  [left bottom width height]
p.UserInput = uipanel('Title','User Input',...
                      'FontSize',10,...
                      'BackgroundColor',colorPanles,...
                      'units', 'pixels',...
                      'Position', [guideTextLeft-5 135 200 fheigth-135]);
                  
p.UserSettings = uipanel('Title','Settings',...
                         'FontSize',10,...
                         'BackgroundColor',colorPanles,...
                         'units', 'pixels',...
                         'Position', [guideTextLeft-5 40 200 95]);

uicontrol('style', 'text',...
                'string', 'Stationary',...
                'FontSize', 10,...
                'BackgroundColor', colorFigure,...
                'position', [230-5 guideBoxesTop+20 80 20]);
            
uicontrol('style', 'text',...
                'string', 'Instationary',...
                'FontSize', 10,...
                'BackgroundColor', colorFigure,...
                'position', [570-5 guideBoxesTop+20 80 20]); 
            
uicontrol('style', 'text',...
                'string', 'Floor Layout',...
                'FontSize', 10,...
                'BackgroundColor', colorFigure,...
                'position', [230-5 30+150 80 20]);  
            
uicontrol('style', 'text',...
                'string', 'Floor Heating',...
                'FontSize', 10,...
                'BackgroundColor', colorFigure,...
                'position', [400-5 30+150 80 20]);  
            
%% Axes for plots
% might want to have panel around the axes 
% position: [left bottom width height]

% Floor
h.AxesFloor = axes('units','pixels',...
                   'position',[230 30 150 150],...
                    'box', 'off',...
                    'XColor', 'none',...
                    'YColor', 'none');
% Heating
h.AxesHeating = axes('units','pixels',...
                    'position',[230+170 30 150 150],...
                    'box', 'off',...
                    'XColor', 'none',...
                    'YColor', 'none');
% Stationary
h.AxesStat = axes('units','pixels',...
                    'position',[230 guideBoxesTop-230 250+50 250],...
                    'box', 'off',...
                    'XColor', 'none',...
                    'YColor', 'none',...
                    'Visible', 'on');
% Instat
h.AxesInstat = axes('units','pixels',...
                    'position',[520+50 guideBoxesTop-230 250+50 250],...
                    'box', 'off',...
                    'XColor', 'none',...
                    'YColor', 'none',...
                    'Visible', 'on');
                
%% Variables
resolution      = {'4';'8';'16';'32';'64';'128';'256';'512'};
T_inf           = num2cell(-10:1:30); % [°C]
T_initial_and_bc= num2cell(0:1:30);
materials       = dataMaterialProperties.Row(:);
roomSizes       = [1,10];
heatingPowerLevels = [0,200];
timeDis         = {'Implicit','Explicit','Crank-Nicolsen'};
defaultDeltaT   = 5; 
timeStep        = {'h','min','sec'};
defaultAlpha    = 5;
defaultExpertMode = 1;

% specifies how much clicking and dragging chages the slider. Must be in %
sliderRoomMinorStep = (roomSizes(end)-roomSizes(1))^-1;
sliderRoomMajorStep = 1;

sliderHeatingMinorStep = (heatingPowerLevels(end)-heatingPowerLevels(1))^-1;
sliderHeatingMajorStep = 1;

%% Grid resolution
txtGridRes = uicontrol('style', 'text',...
                       'string', 'Grid resolution', ...
                       'BackgroundColor', colorPanles,...
                       'HorizontalAlignment', 'Left',...
                       'position', [guideTextLeft guideBoxesTop 80 20]);
            
h.puGridRes = uicontrol('style', 'popup',...
                        'unit', 'pix',...
                        'position', [guideBoxesLeft 490 80 10],...
                        'string', resolution,...
                        'value', 5,...
                        'callback', {@call_changedGridResolution, h});
                    
%% Room Size            
txtRoomSize = uicontrol('style', 'text',...
                        'string', 'Room size', ...
                        'BackgroundColor', colorPanles,...
                        'HorizontalAlignment', 'Left',...
                        'position', [guideTextLeft 240 80 20]);

h.txtRoomSizeSlider = uicontrol('style', 'text',...
                                'string', '', ...
                                'BackgroundColor', colorPanles+0.05,...
                                'FontSize', 6,...
                                'FontAngle', 'italic',...
                                'HorizontalAlignment', 'Left',...
                                'position', [guideTextLeft 220 189 20]);
                  
h.slRoomSize= uicontrol('style', 'slider',...
                        'Value', 4,...
                        'Min', roomSizes(1),...
                        'Max', roomSizes(end),...
                        'SliderStep', [sliderRoomMinorStep sliderRoomMajorStep],...
                        'unit', 'pix',...
                        'position', [guideBoxesLeft 240 80 15],...
                        'callback', {@call_sliderRoomMoved, h});
                    
%% Material 1
txtMat1 = uicontrol('style', 'text',...
                    'string', 'Material 1', ...
                    'BackgroundColor', colorPanles,...
                    'HorizontalAlignment', 'Left',...
                    'position', [guideTextLeft 420 80 20]);
                
txtMat1Color = uicontrol('style', 'text',...
                    'string', '', ...
                    'BackgroundColor', 'green',...
                    'position', [guideBoxesLeft-10 420 10 20]);
                
h.txtMat1 = uicontrol('style', 'text',...
                      'string', '', ...
                      'BackgroundColor', colorPanles+0.05,...
                      'FontSize', 6,...
                      'FontAngle', 'italic',...
                      'HorizontalAlignment', 'Left',...
                      'position', [guideTextLeft 400 189 20]);
            
h.puMat1 = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft 430 80 10],...
                     'string', materials,...
                     'value', 2, ...
                     'callback', {@call_mat1, h,dataMaterialProperties});
                 
%% Material 2
txtMat2 = uicontrol('style', 'text',...
                    'string', 'Material 2', ...
                    'BackgroundColor', colorPanles,...
                    'HorizontalAlignment', 'Left',...
                    'position', [guideTextLeft 380 80 20]);
                
txtMat2Color = uicontrol('style', 'text',...
                    'string', '', ...
                    'BackgroundColor', 'blue',...
                    'position', [guideBoxesLeft-10 380 10 20]);
             
h.txtMat2 = uicontrol('style', 'text',...
                      'string', '', ...
                      'BackgroundColor', colorPanles+0.05,...
                      'FontSize', 6,...
                      'FontAngle', 'italic',...
                      'HorizontalAlignment', 'Left',...
                      'position', [guideTextLeft 360 189 20]);
                  
h.puMat2 = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft 390 80 10],...
                     'string', materials,...
                     'value', 1, ...
                     'callback', {@call_mat2, h,dataMaterialProperties});         
                 
%% time discretisation 
txtInst = uicontrol('style', 'text',...
                    'string', 'Zeitdiskretis.', ...
                    'HorizontalAlignment', 'Left',...
                    'BackgroundColor', colorPanles,...
                    'position', [guideTextLeft 300 80 20]);

h.puInst = uicontrol('style', 'popup',...
                    'unit', 'pix',...
                    'position', [guideBoxesLeft 300 80 20],...
                    'string', timeDis);
                
%% Time Step
txtTimeStep = uicontrol('style', 'text',...
                        'string', 'Time step', ...
                        'HorizontalAlignment', 'Left',...
                        'BackgroundColor', colorPanles,...
                        'position', [guideTextLeft 280 80 20]);

h.edTimeStep = uicontrol('style', 'edit',...
                         'unit', 'pix',...
                         'position', [guideBoxesLeft 280 40 20],...
                         'string', defaultDeltaT);
            
h.puTimeStep = uicontrol('style', 'popup',...
                         'unit', 'pix',...
                         'position', [guideBoxesLeft+40 280 40 20],...
                         'string', timeStep,...
                         'value', 2);
                     
%% Floor 
txtFloor = uicontrol('style', 'text',...
                     'string', 'Floor', ...
                     'HorizontalAlignment', 'Left',...
                     'BackgroundColor', colorPanles,...
                     'position', [guideTextLeft 460 80 20]);

h.puFloor = uicontrol('style', 'popup',...
                      'unit', 'pix',...
                      'position', [guideBoxesLeft 460 80 20],...
                      'string', filesFloor,...
                      'value', 2,...
                      'callback', {@call_picFloor, h});

%% Heating 
txtHeating = uicontrol('style', 'text',...
                       'string', 'Heating', ...
                       'HorizontalAlignment', 'Left',...
                       'BackgroundColor', colorPanles,...
                       'position', [guideTextLeft 440 80 20]);

h.puHeating = uicontrol('style', 'popup',...
                        'unit', 'pix',...
                        'position', [guideBoxesLeft 440 80 20],...
                        'string', filesHeating,'value', 2,...
                        'callback', {@call_picHeating, h});

%% Alpha 
h.txtAlpha = uicontrol('style', 'text',...
                       'string', 'Alpha', ...
                       'BackgroundColor', 'yellow',...
                       'position', [guideTextLeft 200 80 20],...
                       'visible', 'off');
                   
h.edAlpha = uicontrol('style', 'edit',...
                      'unit', 'pix',...
                      'position', [guideBoxesLeft 200 80 20],...
                      'String', defaultAlpha,...
                      'visible', 'off');

%% Options for saving
guideTextBottom = 50;
% position: [left bottom widht heigth]
txtSaveStat = uicontrol('style', 'text',...
                        'string', 'Save stationary solution as .png?', ...
                        'BackgroundColor', colorPanles,...
                        'HorizontalAlignment', 'Left',...
                        'position', [guideTextLeft guideTextBottom+40 167 20]);
                    
h.cbStat = uicontrol('style', 'checkbox',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft+60 guideTextBottom+40 20 20],...
                     'string', '');
             
txtSaveInstat = uicontrol('style', 'text',...
                          'string', 'Save instationary solution as .mp4?', ...
                          'BackgroundColor', colorPanles,...
                          'HorizontalAlignment', 'Left',...
                          'position', [guideTextLeft guideTextBottom+20 167 20]);
                      
h.cbInstat = uicontrol('style', 'checkbox',...
                 'unit', 'pix',...
                 'position', [guideBoxesLeft+60 guideTextBottom+20 20 20],...
                 'string', '');

%% Options (expert mode) 
uicontrol('style', 'text',...
                'string', 'Expert mode', ...
                'BackgroundColor', 'yellow',...
                'HorizontalAlignment', 'Left',...
                'position', [guideTextLeft guideTextBottom 160 20]);
            
h.cbExpertMode = uicontrol('style', 'checkbox',...
                           'unit', 'pix',...
                           'position', [guideBoxesLeft+60 guideTextBottom+0 20 20],...
                           'string', '',...
                           'value', defaultExpertMode,...
                           'callback', {@call_expertModeSwitch, h});
     
%% Heating power
txtHeatingPower = uicontrol('style', 'text',...
                            'string', 'Heating Power', ...
                            'HorizontalAlignment', 'Left',...
                            'BackgroundColor', colorPanles,...
                            'position', [guideTextLeft 340 80 20]);

h.txtHeatingPowerSlider = uicontrol('style', 'text',...
                                    'string', '', ...
                                    'BackgroundColor', colorPanles+.05,...
                                    'FontSize', 6,...
                                    'FontAngle', 'italic',...
                                    'HorizontalAlignment', 'Left',...
                                    'position', [guideTextLeft 320 189 20]);
                  
h.slHeatingPower = uicontrol('style', 'slider',...
                             'Value', heatingPowerLevels(end)/2 ,...
                             'Min', heatingPowerLevels(1),...
                             'Max', heatingPowerLevels(end),...
                             'SliderStep', [sliderHeatingMinorStep sliderHeatingMajorStep],...
                             'unit', 'pix',...
                             'position', [guideBoxesLeft 340 80 15],...
                             'callback', {@call_sliderHeatingMoved, h});
                         
%% Temperature outside (for Cauchy)
uicontrol('style', 'text',...
                'string', 'Temperature outside [°C]', ...
                'BackgroundColor', colorPanles,...
                'HorizontalAlignment', 'Left',...
                'position', [guideTextLeft 180 140 20]);
            
h.puTinf = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft+40 190 40 10],...
                     'string', T_inf,...
                     'Value', 18);
                 
%% Temperature Dirichlet (konst)
% Temperature Wall next to heating room
uicontrol('style', 'text',...
                'string', 'Temperature hot wall [°C]', ...
                'BackgroundColor', colorPanles,...
                'HorizontalAlignment', 'Left',...
                'position', [guideTextLeft 160 140 20]);
            
h.puTdirichlet1 = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft+40 170 40 10],...
                     'string', T_initial_and_bc,...
                     'Value', 26);
% Temperature Walls
uicontrol('style', 'text',...
                'string', 'Temperature cold walls [°C]', ...
                'BackgroundColor', colorPanles,...
                'HorizontalAlignment', 'Left',...
                'position', [guideTextLeft 140 140 20]);
            
h.puTdirichlet2 = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft+40 150 40 10],...
                     'string', T_initial_and_bc,...
                     'Value', 19);
                 
%% Initial Temp
txt = uicontrol('style', 'text',...
                'string', 'Initial Temperature [°C]', ...
                'BackgroundColor', colorPanles,...
                'HorizontalAlignment', 'Left',...
                'position', [guideTextLeft 260 140 20]);
            
h.puTinitial = uicontrol('style', 'popup',...
                     'unit', 'pix',...
                     'position', [guideBoxesLeft+40 270 40 10],...
                     'string', T_initial_and_bc,...
                     'Value', 16);
                 
%% Main
h.pbStart = uicontrol('style', 'push',...
                      'BackgroundColor', [1 1 1],...
                      'FontSize', 10, 'FontWeight', 'bold',...
                      'unit', 'pix',...
                      'position', [guideTextLeft-4 10 200 20],...
                      'string', 'Start Numerical Analysis',...
                      'callback', {@call_main, h, dataMaterialProperties});

%% Initialize GUI
call_mat1(h.puMat1,1,h,dataMaterialProperties)
call_mat2(h.puMat2,1,h,dataMaterialProperties)
call_sliderRoomMoved(h.slRoomSize,1,h)
call_sliderHeatingMoved(h.slHeatingPower,1,h)
call_picFloor(h.puFloor,1,h)
call_picHeating(h.puHeating,1,h)
call_expertModeSwitch(h.cbExpertMode, 1, h)
% msgbox(txtInfo)  

%% Functions
function [] = call_main(varargin) 
global h
h = varargin{1,3};
data = varargin{1,4};
disp('Reading in settings and parameters...')

%% Getting variables & parameters
% User settings
saveStationary = get(h.cbStat, 'value'); % 0 for no , 1 for yes
saveInstationary = get(h.cbInstat, 'value'); % 0 for no , 1 for yes

% Material properties
mat1 = get(h.puMat1, 'string');
mat1 = mat1{get(h.puMat1, 'Value'),1};
mat1_cp = data{mat1, 'cp'};
mat1_lambda = data{mat1, 'lambda'};
mat1_rho = data{mat1, 'rho'};

mat2 = get(h.puMat2, 'string');
mat2 = mat2{get(h.puMat2, 'Value'),1};
mat2_cp = data{mat2, 'cp'};
mat2_lambda = data{mat2, 'lambda'};
mat2_rho = data{mat2, 'rho'};
% Room dimensions & paramters
n = get(h.puGridRes, 'string');
n = str2double(n{get(h.puGridRes, 'Value'),1});
lengthRoom = get(h.slRoomSize,'value');
gridSize = (lengthRoom/n)^2;
% Picture source for floor & heating
namePicFloor = get(h.puFloor, 'string');
namePicFloor = namePicFloor{get(h.puFloor, 'Value'),1};

namePicHeating = get(h.puHeating, 'string');
namePicHeating = namePicHeating{get(h.puHeating, 'Value'),1};
% Heating power
qFloorHeating = get(h.slHeatingPower,'value');

% Boundary cond.
% Cauchy
T_inf = get(h.puTinf, 'string');
T_inf = str2double(T_inf{get(h.puTinf, 'Value'), 1});
T_inf = T_inf + 273.15; % conversion to Kelvin

% Dirichlet 1 (hot wall)
T_dirichlet1 = get(h.puTdirichlet1, 'string');
T_dirichlet1 = str2double(T_dirichlet1{get(h.puTdirichlet1, 'Value'), 1});
T_dirichlet1 = T_dirichlet1 + 273.15; % conversion to Kelvin

% Dirichlet 2 (cold wall)
T_dirichlet2 = get(h.puTdirichlet2, 'string');
T_dirichlet2 = str2double(T_dirichlet2{get(h.puTdirichlet2, 'Value'), 1});
T_dirichlet2 = T_dirichlet2 + 273.15; % conversion to Kelvin

% Initial cond
T_initial = get(h.puTinitial, 'string');
T_initial = str2double(T_initial{get(h.puTinitial, 'Value'), 1});
T_initial = T_initial + 273.15; % conversion to Kelvin

% Parameters for instat. solution method
timeUnitConversion = [3600 60 1]; % h min s 
deltaT_unit = timeUnitConversion(get(h.puTimeStep, 'Value'));
deltaT =    get(h.edTimeStep, 'string');
% User input validation 
deltaT = str2double(deltaT); % returns NaN if not a double
% !!! The next line can be commented out, if vars of type double shall be
% accepted !!! (Like 0.5 seconds)
deltaTintTest = mod(deltaT,1); % Remainder after division, all int can be divided by 1, so remaind will be 0 for ints. Returns NaN if not argument is also NaN
deltaTintTest(isnan(deltaT)) = 1; % if NaN, convert to 1
while deltaTintTest == 1
    prompt      = {'Wrong input. Plese enter time step for instationary solution in seconds'};
    title       = 'Error handling';
    dims        = [1 35];
    definput    = {'deltaT'};
    deltaT      = inputdlg(prompt,title,dims,definput);
    deltaT      = str2double(deltaT);
    deltaTintTest      = mod(deltaT,1); % Remainder after division, all int can be divided by 1. Returns NaN if not argument is also NaN
    deltaTintTest(isnan(deltaTintTest)) = 1;
end
deltaT = deltaT * deltaT_unit;

% alpha
alphaChangedbyUser = get(h.edAlpha, 'visible');
if strcmp(alphaChangedbyUser, 'off')
    alpha = 0.2; %defaultAlpha;
else
    alpha = get(h.edAlpha, 'string');
    alpha = str2double(alpha);
end
   
% gamma
gamma = [1 0 0.5]; % Implicit','Explicit','Crank-Nicolsen
gamma = gamma(get(h.puInst, 'Value'));

%% Solve & plot problem 

main(...
    n, gridSize, namePicFloor, namePicHeating, qFloorHeating,...
    mat2_rho, mat2_cp, mat2_lambda,...
    mat1_rho, mat1_cp, mat1_lambda,...
    gamma, deltaT, T_initial,...
    T_inf, alpha, T_dirichlet2, T_dirichlet1,...
    saveStationary, saveInstationary)

end

function [] = call_expertModeSwitch(varargin)
h = varargin{1,3};
expertMode = get(varargin{1,1}, 'value'); % 0 for no , 1 for yes
switch expertMode
    case 1
        set(h.edAlpha, 'visible', 'on')
        set(h.txtAlpha, 'visible', 'on')
    case 0
        set(h.edAlpha, 'visible', 'off')
        set(h.txtAlpha, 'visible', 'off')
end
end

function [] = call_sliderHeatingMoved(varargin)
h = varargin{1,3};

sliderPosition = get(varargin{1,1}, 'value');

disText = ['Heating Power: ' num2str(sliderPosition) 'W/m²'];
set(h.txtHeatingPowerSlider, 'string', disText)
end

function [] = call_sliderRoomMoved(varargin)
h = varargin{1,3};

sliderPosition = get(varargin{1,1}, 'value');

m2Room = num2str(sliderPosition^2);
n = get(h.puGridRes, 'string');
n = n{get(h.puGridRes, 'Value'),1};
n = str2double(n);
m2FVE = num2str((sliderPosition/n)^2);

disText = ['Length of one side: ' num2str(sliderPosition) 'm' ];...
           %', A(room) = ' m2Room 'm² and A(FV-Element) = ' m2FVE  'm².'];
% disText = strcat('A(room) =',' ', m2Room ,' m^2, ', 'A(FV-Element) =', m2FVE);
set(h.txtRoomSizeSlider, 'string', disText, 'visible', 'on')
end

function [] = call_changedGridResolution(varargin)
% h = varargin{1,3};
% puGridRes = varargin{1,1};
% h.slRoomSize =  varargin{1,4};
% sliderPosition = get(h.slRoomSize, 'value');
%   
% 
% m2Room = num2str(sliderPosition^2);
% n = get(puGridRes, 'string');
% n = n{get(puGridRes, 'Value'),1};
% n = str2double(n);
% m2FVE = num2str((sliderPosition/n)^2);
% n = num2str(n);
% disText = ['Length of one side: ' num2str(sliderPosition) 'm' ...
%            ', A(room) = ' m2Room 'm² and A(FV-Element) = ' m2FVE  'm².'];
% % disText = strcat('A(room) =',' ', m2Room ,' m^2, ', 'A(FV-Element) =', m2FVE);
% set(h.txtRoomSizeSlider, 'string', disText)
end

function [] = call_mat1(varargin)
data = varargin{1,4};
h = varargin{1,3};
handlePopUp = varargin{1,1};
mat1 = get(handlePopUp, 'string');
mat1 = mat1{get(handlePopUp, 'Value'),1};

mat1_cp = data{mat1, 'cp'};
mat1_lambda = data{mat1, 'lambda'};
mat1_rho = data{mat1, 'rho'};
% 32 is ASCII code for whitespace
% disText = strcat('Rho:',32, num2str(mat1_rho),...
%                  ' ,cp: ', num2str(mat1_cp),...
%                  ' ,lambda: ', num2str(mat1_lambda));
disText = ['Info:   Rho: ' num2str(mat1_rho) ' kg/m^3'...
           ', cp: ' num2str(mat1_cp) ' J/kgK' ...
           ', lambda: ' num2str(mat1_lambda) ' W/mK'];
set(h.txtMat1, 'string', disText)
end          

function [] = call_mat2(varargin)
% there is a need for a second function that does the same as the one for
% material1 bc this one sets the string of a different text field. Could
% also be done a bit easier with if or case/switch but it works.
data = varargin{1,4};
h = varargin{1,3};
handlePopUp = varargin{1,1};
mat2 = get(handlePopUp, 'string');
mat2 = mat2{get(handlePopUp, 'Value'),1};

mat2_cp = data{mat2, 'cp'};
mat2_lambda = data{mat2, 'lambda'};
mat2_rho = data{mat2, 'rho'};
% 32 is ASCII code for whitespace
% disText = strcat('Rho:',32, num2str(mat1_rho),...
%                  ' ,cp: ', num2str(mat1_cp),...
%                  ' ,lambda: ', num2str(mat1_lambda));
disText = ['Info:   Rho: ' num2str(mat2_rho) ' kg/m^3'...
           ', cp: ' num2str(mat2_cp) ' J/kgK' ...
           ', lambda: ' num2str(mat2_lambda) ' W/mK'];
set(h.txtMat2, 'string', disText)
end   



function [] = call_picFloor(varargin)
h = varargin{1,3};
handlePopUp = varargin{1,1};
namePic = get(handlePopUp, 'string');
namePic = namePic{get(handlePopUp, 'Value'),1};
axes(h.AxesFloor)
h.Floor = imshow(namePic);
end

function [] = call_picHeating(varargin)
h = varargin{1,3};
handlePopUp = varargin{1,1};
namePic = get(handlePopUp, 'string');
namePic = namePic{get(handlePopUp, 'Value'),1};
axes(h.AxesHeating)
h.Floor = imshow(namePic);
end